import React, { useState } from 'react'
import { motion } from 'framer-motion'
import { BookOpen, TrendingUp, Award, Users, MessageSquare, Zap, Play, Clock } from 'lucide-react'
import useSWR from 'swr'
import { Task } from '@/lib/types'


interface DashboardLearningProps {
  learningPaths: any[]
  stats: any
  userName: string
  isDemo: boolean
}


const fetcher = (url: string) => fetch(`http://localhost:8000${url}`).then(res => res.json())
const postFetcher = ([url, body]: [string, any]) => fetch(`http://localhost:8000${url}`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify(body)
}).then(res => res.json())

export default function DashboardLearning({ learningPaths, stats, userName, isDemo }: DashboardLearningProps) {
  const [experienceLevel, setExperienceLevel] = useState('beginner')
  const [learningGoals, setLearningGoals] = useState(['React', 'Node.js'])

  const { data: learningPlan, mutate: refreshPlan } = useSWR(
    ['/api/generate_plan', { 
      user_role: "developer", 
      experience_level: experienceLevel, 
      learning_goals: learningGoals 
    }],
    postFetcher,
    { refreshInterval: 120000 }
  )

  const { data: agentStatus } = useSWR('/agents', fetcher, { refreshInterval: 15000 })

  

  const aiGeneratedTasks: Task[] = [
  {
    id: 't1',
    title: 'Build React Components',
    description: 'Learn how to build reusable UI components',
    status: 'todo',
    priority: 'medium',
    difficulty: 'easy',
    category: 'Frontend',
    estimatedTime: '2 hours',
    assignedAgent: 'guide',
    skillsRequired: ['React'],
    prerequisites: [],
    tags: ['UI', 'JSX'],
    createdAt: new Date(),
    updatedAt: new Date(),
    aiGenerated: true,
    skills: ['JSX', 'Props', 'State']
  }
]

  const aiLearningPaths = learningPlan?.learning_plan ? [learningPlan.learning_plan] : [
    {
      id: 1,
      title: "React Development Mastery",
      description: "Comprehensive path from basics to advanced React concepts",
      progress: 45,
      totalModules: 12,
      completedModules: 5,
      estimatedTime: "8-10 weeks",
      difficulty: "Intermediate",
      aiGenerated: true,
      nextModule: "React Hooks Deep Dive",
      skills: ["React", "JavaScript", "JSX", "State Management"]
    },
    {
      id: 2,
      title: "Node.js Backend Development",
      description: "Building scalable backend applications with Node.js",
      progress: 20,
      totalModules: 10,
      completedModules: 2,
      estimatedTime: "6-8 weeks",
      difficulty: "Intermediate",
      aiGenerated: true,
      nextModule: "Express.js Fundamentals",
      skills: ["Node.js", "Express", "APIs", "Databases"]
    }
  ]

  const learningStats = {
    totalPaths: aiLearningPaths.length,
    completedModules: aiLearningPaths.reduce((sum, path) => sum + (path.completedModules || 0), 0),
    weeklyTime: "12h 30m",
    averageRating: "4.8",
    aiGenerated: aiLearningPaths.filter(path => path.aiGenerated).length
  }

  const handleGenerateNewPlan = async () => {
    await refreshPlan()
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      className="space-y-6"
    >
      
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 flex items-center">
            <BookOpen className="w-7 h-7 mr-3 text-green-600" />
            AI Learning Paths
          </h2>
          <p className="text-gray-600 mt-1">
            Personalized learning paths generated by AI Guide Agent
            {isDemo && <span className="ml-2 text-blue-600">(Demo Mode)</span>}
          </p>
        </div>
        <div className="flex items-center space-x-3">
          <select 
            value={experienceLevel}
            onChange={(e) => setExperienceLevel(e.target.value)}
            className="text-sm bg-gray-100 border border-gray-300 rounded-lg px-3 py-2"
          >
            <option value="beginner">Beginner</option>
            <option value="intermediate">Intermediate</option>
            <option value="advanced">Advanced</option>
          </select>
          <button
            onClick={handleGenerateNewPlan}
            className="flex items-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
          >
            <Zap className="w-4 h-4" />
            <span>Generate Plan</span>
          </button>
        </div>
      </div>

      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.1 }}
          className="bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-6 text-white"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100 text-sm">AI Generated</p>
              <p className="text-2xl font-bold">{learningStats.aiGenerated}</p>
              <p className="text-green-200 text-xs mt-1">Smart paths</p>
            </div>
            <Zap className="w-8 h-8 text-green-200" />
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.2 }}
          className="bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl p-6 text-white"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-blue-100 text-sm">Time This Week</p>
              <p className="text-2xl font-bold">{learningStats.weeklyTime}</p>
              <p className="text-blue-200 text-xs mt-1">Learning time</p>
            </div>
            <Clock className="w-8 h-8 text-blue-200" />
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
          className="bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl p-6 text-white"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-purple-100 text-sm">Modules Done</p>
              <p className="text-2xl font-bold">{learningStats.completedModules}</p>
              <p className="text-purple-200 text-xs mt-1">Completed</p>
            </div>
            <Award className="w-8 h-8 text-purple-200" />
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.4 }}
          className="bg-gradient-to-r from-orange-500 to-orange-600 rounded-xl p-6 text-white"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-orange-100 text-sm">Avg Rating</p>
              <p className="text-2xl font-bold">{learningStats.averageRating}</p>
              <p className="text-orange-200 text-xs mt-1">Path quality</p>
            </div>
            <TrendingUp className="w-8 h-8 text-orange-200" />
          </div>
        </motion.div>
      </div>

     
      <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900 flex items-center">
            <MessageSquare className="w-5 h-5 mr-2 text-green-600" />
            Guide Agent Status
          </h3>
          <div className="flex items-center space-x-2">
            <div className={`w-3 h-3 rounded-full ${
              agentStatus?.guide?.available ? 'bg-green-500 animate-pulse' : 'bg-red-500'
            }`}></div>
            <span className="text-sm text-gray-600">
              {agentStatus?.guide?.available ? 'Active' : 'Offline'}
            </span>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-green-50 rounded-lg p-4">
            <div className="text-green-600 font-medium">Path Generation</div>
            <div className="text-2xl font-bold text-green-700">Ready</div>
            <div className="text-sm text-green-600">AI analyzing your goals</div>
          </div>
          <div className="bg-blue-50 rounded-lg p-4">
            <div className="text-blue-600 font-medium">Personalization</div>
            <div className="text-2xl font-bold text-blue-700">96%</div>
            <div className="text-sm text-blue-600">Match accuracy</div>
          </div>
          <div className="bg-purple-50 rounded-lg p-4">
            <div className="text-purple-600 font-medium">Estimated Duration</div>
            <div className="text-2xl font-bold text-purple-700">
              {learningPlan?.estimated_duration || "8-12 weeks"}
            </div>
            <div className="text-sm text-purple-600">For your goals</div>
          </div>
        </div>
      </div>

      
      <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-gray-900 flex items-center">
            <Zap className="w-5 h-5 mr-2 text-yellow-500" />
            AI Generated Learning Paths
          </h3>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {aiLearningPaths.map((path, index) => (
            <motion.div
              key={path.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6"
            >
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <h4 className="font-semibold text-gray-900">{path.title}</h4>
                    <span className="bg-green-100 text-green-700 text-xs px-2 py-1 rounded-full">
                      AI Generated
                    </span>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">{path.description}</p>
                </div>
              </div>
              
              <div className="space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">Progress</span>
                  <span className="font-medium">{path.progress}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-green-500 to-blue-500 h-2 rounded-full transition-all duration-500"
                    style={{ width: `${path.progress}%` }}
                  ></div>
                </div>
                
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-500">Modules:</span>
                    <span className="ml-1 font-medium">{path.completedModules}/{path.totalModules}</span>
                  </div>
                  <div>
                    <span className="text-gray-500">Time:</span>
                    <span className="ml-1 font-medium">{path.estimatedTime}</span>
                  </div>
                </div>
                
                  <div className="space-y-4">
                    {aiGeneratedTasks.map((task: Task, index: number) => (
                      <motion.div
                        key={task.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.1 }}
                        className="bg-gradient-to-r from-orange-50 to-yellow-50 border border-orange-200 rounded-lg p-4"
                      >
                        <div className="flex flex-wrap gap-2 mb-3">
                          {task.skills?.map((skill: string, skillIndex: number) => (
                            <span key={skillIndex} className="bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded">
                              {skill}
                            </span>
                          ))}
                        </div>
                      </motion.div>
                    ))}
                  </div>


                <div className="flex items-center justify-between pt-3 border-t border-gray-200">
                  <div>
                    <div className="text-xs text-gray-500">Next Module:</div>
                    <div className="text-sm font-medium text-gray-900">{path.nextModule}</div>
                  </div>
                  <button className="flex items-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
                    <Play className="w-4 h-4" />
                    <span>Continue</span>
                  </button>
                </div>
              </div>
            </motion.div>
          ))}
        </div>

        {aiLearningPaths.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            <BookOpen className="w-12 h-12 mx-auto mb-3 text-gray-300" />
            <p className="mb-2">No AI learning paths generated yet</p>
            <button 
              onClick={handleGenerateNewPlan}
              className="text-green-600 hover:text-green-700 font-medium"
            >
              Generate your first AI learning path →
            </button>
          </div>
        )}
      </div>

      
      <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
          <TrendingUp className="w-5 h-5 mr-2 text-blue-600" />
          Customize Learning Goals
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Current Learning Goals
            </label>
            <div className="flex flex-wrap gap-2">
              {learningGoals.map((goal, index) => (
                <span key={index} className="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm">
                  {goal}
                </span>
              ))}
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Experience Level
            </label>
            <div className="bg-blue-50 px-3 py-2 rounded-lg">
              <span className="text-blue-700 font-medium capitalize">{experienceLevel}</span>
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  )
}